<class>
  <keyword> class </keyword>
  <identifier>
   <name> Main </name>
   <category> class </category>
   <index> none </index>
   <usage> declared </usage>
  </identifier>
  <symbol> { </symbol>
  <classVarDec>
   <keyword> static </keyword>
   <keyword> boolean </keyword>
   <identifier>
    <name> test </name>
    <category> static </category>
    <index> 0 </index>
    <usage> declared </usage>
   </identifier>
   <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
   <keyword> function </keyword>
   <keyword> void </keyword>
   <identifier>
    <name> main </name>
    <category> subroutine </category>
    <index> none </index>
    <usage> declared </usage>
   </identifier>
   <symbol> ( </symbol>
   <parameterList>
   </parameterList>
   <symbol> ) </symbol>
   <subroutineBody>
    <symbol> { </symbol>
    <varDec>
     <keyword> var </keyword>
     <identifier>
      <name> SquareGame </name>
      <category> class </category>
      <index> none </index>
      <usage> used </usage>
     </identifier>
     <identifier>
      <name> game </name>
      <category> local </category>
      <index> 0 </index>
      <usage> declared </usage>
     </identifier>
     <symbol> ; </symbol>
    </varDec>
    <statements>
     <letStatement>
      <keyword> let </keyword>
      <identifier>
       <name> game </name>
       <category> local </category>
       <index> 0 </index>
       <usage> used </usage>
      </identifier>
      <symbol> = </symbol>
      <expression>
       <term>
        <identifier>
         <name> SquareGame </name>
         <category> class </category>
         <index> none </index>
         <usage> used </usage>
        </identifier>
        <symbol> . </symbol>
        <identifier>
         <name> new </name>
         <category> subroutine </category>
         <index> none </index>
         <usage> used </usage>
        </identifier>
        <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
       </term>
      </expression>
      <symbol> ; </symbol>
     </letStatement>
     <doStatement>
      <keyword> do </keyword>
      <identifier>
       <name> game </name>
       <category> local </category>
       <index> 0 </index>
       <usage> used </usage>
      </identifier>
      <symbol> . </symbol>
      <identifier>
       <name> run </name>
       <category> subroutine </category>
       <index> none </index>
       <usage> used </usage>
      </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
     </doStatement>
     <doStatement>
      <keyword> do </keyword>
      <identifier>
       <name> game </name>
       <category> local </category>
       <index> 0 </index>
       <usage> used </usage>
      </identifier>
      <symbol> . </symbol>
      <identifier>
       <name> dispose </name>
       <category> subroutine </category>
       <index> none </index>
       <usage> used </usage>
      </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
     </doStatement>
     <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
     </returnStatement>
    </statements>
    <symbol> } </symbol>
   </subroutineBody>
  </subroutineDec>
  <subroutineDec>
   <keyword> function </keyword>
   <keyword> void </keyword>
   <identifier>
    <name> more </name>
    <category> subroutine </category>
    <index> none </index>
    <usage> declared </usage>
   </identifier>
   <symbol> ( </symbol>
   <parameterList>
   </parameterList>
   <symbol> ) </symbol>
   <subroutineBody>
    <symbol> { </symbol>
    <varDec>
     <keyword> var </keyword>
     <keyword> int </keyword>
     <identifier>
      <name> i </name>
      <category> local </category>
      <index> 0 </index>
      <usage> declared </usage>
     </identifier>
     <symbol> , </symbol>
     <identifier>
      <name> j </name>
      <category> local </category>
      <index> 1 </index>
      <usage> declared </usage>
     </identifier>
     <symbol> ; </symbol>
    </varDec>
    <varDec>
     <keyword> var </keyword>
     <identifier>
      <name> String </name>
      <category> class </category>
      <index> none </index>
      <usage> used </usage>
     </identifier>
     <identifier>
      <name> s </name>
      <category> local </category>
      <index> 2 </index>
      <usage> declared </usage>
     </identifier>
     <symbol> ; </symbol>
    </varDec>
    <varDec>
     <keyword> var </keyword>
     <identifier>
      <name> Array </name>
      <category> class </category>
      <index> none </index>
      <usage> used </usage>
     </identifier>
     <identifier>
      <name> a </name>
      <category> local </category>
      <index> 3 </index>
      <usage> declared </usage>
     </identifier>
     <symbol> ; </symbol>
    </varDec>
    <statements>
     <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <expression>
       <term>
        <keyword> false </keyword>
       </term>
      </expression>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <statements>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> s </name>
         <category> local </category>
         <index> 2 </index>
         <usage> used </usage>
        </identifier>
        <symbol> = </symbol>
        <expression>
         <term>
          <stringConstant> string constant </stringConstant>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> s </name>
         <category> local </category>
         <index> 2 </index>
         <usage> used </usage>
        </identifier>
        <symbol> = </symbol>
        <expression>
         <term>
          <keyword> null </keyword>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> a </name>
         <category> local </category>
         <index> 3 </index>
         <usage> used </usage>
        </identifier>
        <symbol> [ </symbol>
        <expression>
         <term>
          <integerConstant> 1 </integerConstant>
         </term>
        </expression>
        <symbol> ] </symbol>
        <symbol> = </symbol>
        <expression>
         <term>
          <identifier>
           <name> a </name>
           <category> local </category>
           <index> 3 </index>
           <usage> used </usage>
          </identifier>
          <symbol> [ </symbol>
          <expression>
           <term>
            <integerConstant> 2 </integerConstant>
           </term>
          </expression>
          <symbol> ] </symbol>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
      </statements>
      <symbol> } </symbol>
      <keyword> else </keyword>
      <symbol> { </symbol>
      <statements>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> i </name>
         <category> local </category>
         <index> 0 </index>
         <usage> used </usage>
        </identifier>
        <symbol> = </symbol>
        <expression>
         <term>
          <identifier>
           <name> i </name>
           <category> local </category>
           <index> 0 </index>
           <usage> used </usage>
          </identifier>
         </term>
         <symbol> * </symbol>
         <term>
          <symbol> ( </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <identifier>
              <name> j </name>
              <category> local </category>
              <index> 1 </index>
              <usage> used </usage>
             </identifier>
            </term>
           </term>
          </expression>
          <symbol> ) </symbol>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> j </name>
         <category> local </category>
         <index> 1 </index>
         <usage> used </usage>
        </identifier>
        <symbol> = </symbol>
        <expression>
         <term>
          <identifier>
           <name> j </name>
           <category> local </category>
           <index> 1 </index>
           <usage> used </usage>
          </identifier>
         </term>
         <symbol> / </symbol>
         <term>
          <symbol> ( </symbol>
          <expression>
           <term>
            <symbol> - </symbol>
            <term>
             <integerConstant> 2 </integerConstant>
            </term>
           </term>
          </expression>
          <symbol> ) </symbol>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
       <letStatement>
        <keyword> let </keyword>
        <identifier>
         <name> i </name>
         <category> local </category>
         <index> 0 </index>
         <usage> used </usage>
        </identifier>
        <symbol> = </symbol>
        <expression>
         <term>
          <identifier>
           <name> i </name>
           <category> local </category>
           <index> 0 </index>
           <usage> used </usage>
          </identifier>
         </term>
         <symbol> | </symbol>
         <term>
          <identifier>
           <name> j </name>
           <category> local </category>
           <index> 1 </index>
           <usage> used </usage>
          </identifier>
         </term>
        </expression>
        <symbol> ; </symbol>
       </letStatement>
      </statements>
      <symbol> } </symbol>
     </ifStatement>
     <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
     </returnStatement>
    </statements>
    <symbol> } </symbol>
   </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
